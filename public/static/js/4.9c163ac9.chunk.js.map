{"version":3,"sources":["hooks/useResizeObserver.js","components/Graph/CoronaVirusGraph.jsx"],"names":["useResizeObserver","colors","GraphComp","props","chartData","width","chartType","height","data","margin","top","right","bottom","left","type","dataKey","stroke","strokeDasharray","fill","defaultProps","Graph","memo","GraphGeneratorComp","size","reduce","acc","curr","i","self","slice","map","chart","key","City","GraphGenerator","useState","fetchTime","setFetchTime","setChartData","dataUpdatedAt","setDataUpdatedAt","origChartData","useRef","ref","useFetch","url","window","location","origin","includes","retries","loading","setChartType","selectedCountry","setSelectedCountry","countries","setCountries","getTotalOf","useCallback","value","current","country","useEffect","updateTime","results","r","sort","a","b","humanReadableTime","moment","format","newChartData","dataObject","history","countryInHistory","countryEnglishName","countryName","Dead","deadCount","Cured","curedCount","Infected","confirmedCount","Object","values","String","localeCompare","makeChartData","Date","now","c","className","href","onChange","e","target","onClick","newData","filter","removeCountryFromData"],"mappings":"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","file":"static/js/4.9c163ac9.chunk.js","sourcesContent":["import { useState, useCallback } from 'react'\nimport { useDebouncedFn, useThrottledFn } from 'beautiful-react-hooks'\nimport useResizeObserver from 'use-resize-observer';\n\nexport const useResizeObserverThrottled = wait => {\n  const [size, setSize] = useState({});\n  const onResize = useThrottledFn(setSize, wait)\n  const { ref } = useResizeObserver({ onResize });\n\n  return { ref, ...size };\n};\n\nexport const useResizeObserverDebounced = wait => {\n  const [size, setSize] = useState({});\n  const options = {\n    leading: false,\n    trailing: true,\n  };\n  const onResizeFN = useDebouncedFn(setSize, wait, options)\n  const onResize = useCallback((...arg) => onResizeFN(...arg), [onResizeFN])\n  const { ref } = useResizeObserver({ onResize });\n\n  return { ref, ...size };\n};\n\nexport default useResizeObserver;","import React, {\n  useEffect,\n  useState,\n  useRef,\n  useCallback,\n  memo,\n} from \"react\";\n\nimport {\n  LineChart,\n  BarChart,\n  CartesianGrid,\n  YAxis,\n  XAxis,\n  Tooltip,\n  Line,\n  Bar,\n  Legend\n} from \"recharts\";\nimport moment from \"moment\";\nimport useFetch from \"use-http\";\n\nimport useResizeObserver from \"../../hooks/useResizeObserver\";\n\nconst colors = {\n  dead: \"#ff0000\",\n  cured: \"#25bafa\",\n  infected: \"#c2b527\"\n};\n\nconst GraphComp = props => {\n  const { chartData, width, chartType } = props;\n\n  if (chartType === \"bar\") {\n    return (\n      <>\n        <BarChart\n          width={width}\n          height={300}\n          data={chartData}\n          margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\n        >\n          <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n          <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n          <XAxis dataKey=\"City\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"Dead\" fill={colors.dead} />\n          <Bar dataKey=\"Cured\" fill={colors.cured} />\n          <Bar dataKey=\"Infected\" fill={colors.infected} />\n        </BarChart>\n        <br />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <LineChart data={chartData} width={width} height={300}>\n        <Line type=\"monotone\" dataKey=\"Dead\" stroke={colors.dead} />\n        <Line type=\"monotone\" dataKey=\"Cured\" stroke={colors.cured} />\n        <Line type=\"monotone\" dataKey=\"Infected\" stroke={colors.infected} />\n        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n        <XAxis dataKey=\"City\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n      </LineChart>\n      <br />\n    </>\n  );\n};\n\nGraphComp.defaultProps = {\n  chartData: [],\n  width: 600,\n  chartType: \"line\"\n};\n\nconst Graph = memo(GraphComp);\n\nconst GraphGeneratorComp = props => {\n  const { chartData, width, size, chartType } = props;\n  if (!chartData.reduce) return null;\n  return chartData\n    .reduce((acc, curr, i, self) => {\n      if (!(i % size)) {\n        return [...acc, self.slice(i, i + size)];\n      }\n      return acc;\n    }, [])\n    .map((chart, i) => (\n      <Graph\n        // key={\"graph-\" + i}\n        key={chart[0].City}\n        chartType={chartType}\n        chartData={chart}\n        width={width}\n      />\n    ));\n};\n\nGraphGeneratorComp.defaultProps = {\n  chartData: [],\n  width: 600,\n  size: 10,\n  chartType: \"line\"\n};\n\nconst GraphGenerator = memo(GraphGeneratorComp);\n\nconst CoronaGraph = props => {\n  const [fetchTime, setFetchTime] = useState(0);\n  const [chartData, setChartData] = useState(null);\n  const [dataUpdatedAt, setDataUpdatedAt] = useState(0);\n  const origChartData = useRef();\n\n  const { ref, width = 1 } = useResizeObserver();\n  // const { ref, width = 1 } = useResizeObserverDebounced();\n  const { data, loading } = useFetch(\n    {\n      url: window.location.origin.includes(\"localhost\")\n        ? \"http://localhost:4000/api\"\n        : window.location.origin + \"/api\",\n      retries: 3\n    },\n    []\n  );\n\n  const [chartType, setChartType] = useState(\"bar\");\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [countries, setCountries] = useState([]);\n\n  function makeChartData(data) {\n    const dataArray = data.results;\n    const dataObject = dataArray.reduce((history, country) => {\n      const countryInHistory =\n        history[country.countryEnglishName || country.countryName];\n\n      // Tjekker om vi har dette land allerede\n      if (countryInHistory) {\n        // Ligger nye data sammen med gamle data\n        countryInHistory.Dead += country.deadCount;\n        countryInHistory.Cured += country.curedCount;\n        countryInHistory.Infected += country.confirmedCount;\n        // } else if (country.countryEnglishName !== \"China\") {\n      } else {\n        // Hvis vi ikke har landet s√• skriver vi det til history\n        history[country.countryEnglishName || country.countryName] = {\n          City: country.countryEnglishName || country.countryName,\n          Dead: country.deadCount,\n          Cured: country.curedCount,\n          Infected: country.confirmedCount\n        };\n      }\n      return history;\n    }, {});\n\n    const sortedDataArray = Object.values(dataObject);\n    const alphabeticallySortedDataArray = sortedDataArray.sort((a, b) => {\n      return String(a.City).localeCompare(String(b.City));\n    });\n    return alphabeticallySortedDataArray;\n  }\n\n  const removeCountryFromData = country => {\n    if (chartData) {\n      const newData = chartData.filter(({ City }) => City !== country);\n      setChartData(newData);\n    }\n  };\n\n  const handleCountrySelect = e => {\n    setSelectedCountry(e.target.value);\n  };\n\n  const removeSelectedCountry = () => {\n    removeCountryFromData(selectedCountry);\n  };\n\n  const toggleBarType = () => {\n    if (chartType === \"line\") {\n      setChartType(\"bar\");\n    } else {\n      setChartType(\"line\");\n    }\n  };\n\n  const getTotalOf = useCallback(\n    value => {\n      if (origChartData.current) {\n        return origChartData.current.reduce(\n          (acc, country) => (acc += country[value]),\n          0\n        );\n      }\n    },\n    [origChartData]\n  );\n\n  useEffect(() => {\n    if (!chartData && !loading && data) {\n      const updateTimes = data.results.map(r => r.updateTime);\n      const updateTime = updateTimes.sort((a, b) => a.updateTime < b.updateTime)[0];\n      const humanReadableTime = moment(updateTime).format(\"DD/MM-YYYY HH:mm\");\n      const newChartData = makeChartData(data);\n      setDataUpdatedAt(humanReadableTime);\n      origChartData.current = newChartData;\n      setChartData(newChartData);\n      setFetchTime(Date.now());\n      setCountries(newChartData.map(c => c.City));\n      setSelectedCountry(newChartData[0].City);\n      // startTransition(() =>\n      //   fetch(\"http://localhost:4000/api/delayed\")\n      //     .then(res => res.json())\n      //     .then(data => {\n      //       const updateTimes = data.results.map(r => r.updateTime);\n      //       const updateTime = updateTimes.sort(\n      //         (a, b) => a.updateTime < b.updateTime\n      //       )[0];\n      //       const humanReadableTime = moment(updateTime).format(\n      //         \"DD/MM-YYYY HH:mm\"\n      //       );\n      //       const newChartData = makeChartData(data);\n      //       setDataUpdatedAt(humanReadableTime);\n      //       origChartData.current = newChartData;\n      //       setChartData(newChartData);\n      //       setFetchTime(Date.now());\n      //       setCountries(newChartData.map(c => c.City));\n      //       setSelectedCountry(newChartData[0].City);\n      //     })\n      // );\n    }\n  // }, [chartData, data, loading, startTransition]);\n  }, [chartData, data, loading]);\n\n  return (\n    <div className=\"fetch-div\" ref={ref}>\n      <p>\n        Data kommer fra: <a href=\"https://ncov.dxy.cn\">https://ncov.dxy.cn</a>{\" \"}\n        via <a href=\"https://lab.isaaclin.cn/\">https://lab.isaaclin.cn/</a>\n      </p>\n      {!loading && (\n        <>\n          <p>Data er opdateret: {dataUpdatedAt} lokal tid</p>\n          <p>\n            Data blev hentet: {moment(fetchTime).format(\"DD/MM-YYYY HH:mm\")}\n          </p>\n          <p>Antal inficerede p√• verdensplan: {getTotalOf(\"Infected\")}</p>\n          <p>Antal kurerede p√• verdensplan: {getTotalOf(\"Cured\")}</p>\n          <p>Antal d√∏de p√• verdensplan: {getTotalOf(\"Dead\")}</p>\n        </>\n      )}\n      <select onChange={handleCountrySelect} value={selectedCountry}>\n        {countries.map((country, i) => (\n          <option key={\"country-option\" + i} value={country}>\n            {country}\n          </option>\n        ))}\n      </select>\n      <button onClick={removeSelectedCountry}>\n        Fjern det valge land fra graf\n      </button>{\" \"}\n      <button onClick={() => setChartData(origChartData.current)}>\n        Gendan original graf\n      </button>{\" \"}\n      <button onClick={toggleBarType}>\n        {chartType === \"line\" ? \"Vis som s√∏jlediagram\" : \"Vis graf\"}\n      </button>\n      {!loading && chartData && (\n        <GraphGenerator\n          chartData={chartData}\n          chartType={chartType}\n          width={width}\n          size={width < 600 ? 3 : 10}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(CoronaGraph);\n"],"sourceRoot":""}